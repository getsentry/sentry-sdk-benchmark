package main

import (
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"testing"
)

func Test_formatSDKName(t *testing.T) {
	tests := []struct {
		n    string
		want string
	}{
		{
			n:    "sentry.python",
			want: "sentry-python",
		},
		{
			n:    "sentry.javascript.node",
			want: "sentry-javascript",
		},
	}
	for _, tt := range tests {
		t.Run(tt.n, func(t *testing.T) {
			if got := formatSDKName(tt.n); got != tt.want {
				t.Errorf("formatSDKName() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_getAppDetails(t *testing.T) {
	type args struct {
		path         string
		relayMetrics map[string]interface{}
	}
	tests := []struct {
		name string
		args args
		want AppDetails
	}{
		{
			name: "Python Django",
			args: args{
				path: "result/python/django/20210923-152931-snbclwa/baseline",
				relayMetrics: func() map[string]interface{} {
					sdk := make(map[string]interface{})
					sdk["name"] = "sentry.python"
					sdk["version"] = "1.3.0"

					relayMetrics := make(map[string]interface{})
					relayMetrics["sdk"] = sdk
					return relayMetrics
				}(),
			},
			want: AppDetails{
				Language:   "python",
				Framework:  "django",
				SdkName:    "sentry-python",
				SdkVersion: "1.3.0",
			},
		},
		{
			name: "JavaScript Express",
			args: args{
				path: "result/javascript/express/20210923-145159-yaubxsi/baseline",
				relayMetrics: func() map[string]interface{} {
					sdk := make(map[string]interface{})
					sdk["name"] = "sentry.javascript"
					sdk["version"] = "6.11.0"

					relayMetrics := make(map[string]interface{})
					relayMetrics["sdk"] = sdk
					return relayMetrics
				}(),
			},
			want: AppDetails{
				Language:   "javascript",
				Framework:  "express",
				SdkName:    "sentry-javascript",
				SdkVersion: "6.11.0",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := getAppDetails(tt.args.path, tt.args.relayMetrics); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("getConfiguration() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_plotHDR(t *testing.T) {
	tests := []struct {
		name string
	}{
		{
			name: "testing123",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			hdrs := []string{`Value(ms)  Percentile  TotalCount  1/(1-Percentile)
			14.920900  0.000000    0           1.000000
			22.771125  0.100000    30          1.111111
			25.878422  0.200000    60          1.250000
			27.723462  0.300000    90          1.428571
			29.130150  0.400000    120         1.666667
			30.794162  0.500000    150         2.000000
			31.607143  0.550000    165         2.222222
			32.049650  0.600000    180         2.500000
			33.047000  0.650000    195         2.857143
			33.989187  0.700000    210         3.333333
			35.251025  0.750000    225         4.000000
			35.498855  0.775000    233         4.444444
			35.899461  0.800000    240         5.000000
			36.183222  0.825000    248         5.714286
			36.697705  0.850000    255         6.666667
			37.201988  0.875000    263         8.000000
			37.510040  0.887500    266         8.888889
			38.089075  0.900000    270         10.000000
			38.767043  0.912500    274         11.428571
			39.822137  0.925000    278         13.333333
			41.279831  0.937500    281         16.000000
			42.014203  0.943750    283         17.777778
			42.678750  0.950000    285         20.000000
			42.972750  0.956250    287         22.857143
			43.126325  0.962500    289         26.666667
			44.350375  0.968750    291         32.000000
			44.580193  0.971875    292         35.555556
			45.552100  0.975000    293         40.000000
			46.371475  0.978125    293         45.714286
			48.892287  0.981250    294         53.333333
			50.389900  0.984375    295         64.000000
			51.147128  0.985938    296         71.113640
			51.967975  0.987500    296         80.000000
			53.809574  0.989062    297         91.424392
			56.820475  0.990625    297         106.666667
			60.880319  0.992188    298         128.008193
			63.956209  0.992969    298         142.227279
			67.032100  0.993750    298         160.000000
			70.107990  0.994531    298         182.848784
			72.475230  0.995313    299         213.356091
			73.773065  0.996094    299         256.016385
			74.421151  0.996484    299         284.414107
			75.070900  0.996875    299         320.000000
			75.720648  0.997266    299         365.764448
			76.368734  0.997656    299         426.621160
			77.018482  0.998047    299         512.032770
			77.342525  0.998242    299         568.828214
			77.494300  0.998437    300         639.795266
			77.494300  0.998633    300         731.528895
			77.494300  0.998828    300         853.242321
			77.494300  0.999023    300         1023.541453
			77.494300  0.999121    300         1137.656428
			77.494300  0.999219    300         1280.409731
			77.494300  0.999316    300         1461.988304
			77.494300  0.999414    300         1706.484642
			77.494300  0.999512    300         2049.180328
			77.494300  0.999561    300         2277.904328
			77.494300  0.999609    300         2557.544757
			77.494300  0.999658    300         2923.976608
			77.494300  0.999707    300         3412.969283
			77.494300  0.999756    300         4098.360656
			77.494300  0.999780    300         4545.454545
			77.494300  0.999805    300         5128.205128
			77.494300  0.999829    300         5847.953216
			77.494300  0.999854    300         6849.315068
			77.494300  0.999878    300         8196.721311
			77.494300  0.999890    300         9090.909091
			77.494300  0.999902    300         10204.081633
			77.494300  0.999915    300         11764.705882
			77.494300  0.999927    300         13698.630137
			77.494300  0.999939    300         16393.442623
			77.494300  0.999945    300         18181.818182
			77.494300  0.999951    300         20408.163265
			77.494300  0.999957    300         23255.813953
			77.494300  0.999963    300         27027.027027
			77.494300  0.999969    300         32258.064516
			77.494300  0.999973    300         37037.037037
			77.494300  0.999976    300         41666.666667
			77.494300  0.999979    300         47619.047619
			77.494300  0.999982    300         55555.555556
			77.494300  0.999985    300         66666.666667
			77.494300  0.999986    300         71428.571429
			77.494300  0.999988    300         83333.333333
			77.494300  0.999989    300         90909.090909
			77.494300  0.999991    300         111111.111111
			77.494300  0.999992    300         125000.000000
			77.494300  0.999993    300         142857.142858
			77.494300  0.999994    300         166666.666668
			77.494300  0.999995    300         199999.999999
			77.494300  0.999996    300         250000.000000
			77.494300  0.999997    300         333333.333336
			77.494300  0.999998    300         500000.000013
			77.494300  0.999999    300         999999.999971
			77.494300  1.000000    300         10000000.000000`,
				`Value(ms)  Percentile  TotalCount  1/(1-Percentile)
			18.094400  0.000000    0           1.000000
			26.730875  0.100000    30          1.111111
			30.124011  0.200000    60          1.250000
			32.124800  0.300000    90          1.428571
			34.154800  0.400000    120         1.666667
			35.754262  0.500000    150         2.000000
			36.464200  0.550000    165         2.222222
			37.297625  0.600000    180         2.500000
			38.070956  0.650000    195         2.857143
			38.867912  0.700000    210         3.333333
			39.948237  0.750000    225         4.000000
			40.617133  0.775000    233         4.444444
			41.338633  0.800000    240         5.000000
			41.703644  0.825000    248         5.714286
			42.858305  0.850000    255         6.666667
			43.853766  0.875000    263         8.000000
			44.448480  0.887500    266         8.888889
			44.726350  0.900000    270         10.000000
			45.326037  0.912500    274         11.428571
			45.880950  0.925000    278         13.333333
			46.545581  0.937500    281         16.000000
			47.714490  0.943750    283         17.777778
			47.919850  0.950000    285         20.000000
			48.042575  0.956250    287         22.857143
			48.758925  0.962500    289         26.666667
			48.955625  0.968750    291         32.000000
			48.975450  0.971875    292         35.555556
			49.039200  0.975000    293         40.000000
			49.414668  0.978125    293         45.714286
			50.258787  0.981250    294         53.333333
			51.092587  0.984375    295         64.000000
			52.907004  0.985938    296         71.113640
			55.653000  0.987500    296         80.000000
			58.671655  0.989062    297         91.424392
			62.004268  0.990625    297         106.666667
			64.672963  0.992188    298         128.008193
			65.343600  0.992969    298         142.227279
			66.014237  0.993750    298         160.000000
			66.684874  0.994531    298         182.848784
			67.305832  0.995313    299         213.356091
			67.850369  0.996094    299         256.016385
			68.122289  0.996484    299         284.414107
			68.394906  0.996875    299         320.000000
			68.667523  0.997266    299         365.764448
			68.939442  0.997656    299         426.621160
			69.212059  0.998047    299         512.032770
			69.348019  0.998242    299         568.828214
			69.411700  0.998437    300         639.795266
			69.411700  0.998633    300         731.528895
			69.411700  0.998828    300         853.242321
			69.411700  0.999023    300         1023.541453
			69.411700  0.999121    300         1137.656428
			69.411700  0.999219    300         1280.409731
			69.411700  0.999316    300         1461.988304
			69.411700  0.999414    300         1706.484642
			69.411700  0.999512    300         2049.180328
			69.411700  0.999561    300         2277.904328
			69.411700  0.999609    300         2557.544757
			69.411700  0.999658    300         2923.976608
			69.411700  0.999707    300         3412.969283
			69.411700  0.999756    300         4098.360656
			69.411700  0.999780    300         4545.454545
			69.411700  0.999805    300         5128.205128
			69.411700  0.999829    300         5847.953216
			69.411700  0.999854    300         6849.315068
			69.411700  0.999878    300         8196.721311
			69.411700  0.999890    300         9090.909091
			69.411700  0.999902    300         10204.081633
			69.411700  0.999915    300         11764.705882
			69.411700  0.999927    300         13698.630137
			69.411700  0.999939    300         16393.442623
			69.411700  0.999945    300         18181.818182
			69.411700  0.999951    300         20408.163265
			69.411700  0.999957    300         23255.813953
			69.411700  0.999963    300         27027.027027
			69.411700  0.999969    300         32258.064516
			69.411700  0.999973    300         37037.037037
			69.411700  0.999976    300         41666.666667
			69.411700  0.999979    300         47619.047619
			69.411700  0.999982    300         55555.555556
			69.411700  0.999985    300         66666.666667
			69.411700  0.999986    300         71428.571429
			69.411700  0.999988    300         83333.333333
			69.411700  0.999989    300         90909.090909
			69.411700  0.999991    300         111111.111111
			69.411700  0.999992    300         125000.000000
			69.411700  0.999993    300         142857.142858
			69.411700  0.999994    300         166666.666668
			69.411700  0.999995    300         199999.999999
			69.411700  0.999996    300         250000.000000
			69.411700  0.999997    300         333333.333336
			69.411700  0.999998    300         500000.000013
			69.411700  0.999999    300         999999.999971
			69.411700  1.000000    300         10000000.000000`}
			// plotHDR()
			// Value(ms)  Percentile  TotalCount  1/(1-Percentile)

			var d [][]float64
			for i, h := range hdrs {
				for j, l := range strings.Split(strings.TrimRight(h, "\n"), "\n") {
					if j == 0 || l == "" {
						continue
					}
					f := strings.Fields(l)

					if len(f) == 0 {
						continue
					}

					if i == 0 {
						temp := make([]float64, len(hdrs)+1)
						temp[0] = 100.0 - 100.0/mustParseFloat(f[3])
						temp[i+1] = mustParseFloat(f[0])
						d = append(d, temp)
					} else {
						d[j-1][i+1] = mustParseFloat(f[0])
					}
				}
			}

			// data, _ := json.Marshal(d)
			fmt.Println(d)
		})
	}
}

type dataPoint []float64
type hdrData []dataPoint

func mustParseFloat(s string) float64 {
	f, err := strconv.ParseFloat(s, 64)
	if err != nil {
		panic(err)
	}
	return f
}
